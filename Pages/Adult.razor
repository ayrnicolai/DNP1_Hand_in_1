@page "/Adult"
@using Hand_in_1.Data;
@using Hand_in_1.Models;
@inject IAdultData AdultData

<html>
<style>
table, th, td {
  border:1px solid grey;
}
</style>
</html>


<h3>Adult</h3>
<p>
    Filter person: <input type="number" @oninput="@((arg) => Filter(arg))" style="width:50px"/>
</p>

@if (adultsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
} else if (!adultsToShow.Any())
{
    <p>
        <em>No adult items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
       <tr>
                     <th>User ID</th>
                     <th>FirstName</th>
                     <th>LastName</th>
                     <th>HairColor</th>
                     <th>EyeColor</th>
                     <th>Age</th>
                     <th>Weight</th>
                     <th>Height</th>
                     <th>Sex</th>
                     <th>Remove</th>
       </tr>
        <tbody>
        @foreach (var item in adultsToShow) //
        {
            
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
                <td>
                    <button @onclick="@(() => RemoveAdult(item.Id))">
                        <i class="oi oi-trash" style="color:blue"/>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Person> adult;
    private IList<Person> allAdults;
    private IList<Person> adultsToShow;

    private void Filter(ChangeEventArgs changeEventArgs)
    {
        int? filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        } catch (Exception e) {}
        if (filterById != null)
        {
            adultsToShow = allAdults.Where(t => t.Id == filterById).ToList();
        }
        else
        {
            adultsToShow = allAdults;
        }
        
    }

    protected override async Task OnInitializedAsync()
    {
        allAdults = AdultData.getAdult();
        adultsToShow = allAdults;
    }

    private void RemoveAdult(int Id)
    {
        Person personToRemove = adultsToShow.First(t => t.Id == Id);
        AdultData.RemoveAdult(Id);
        allAdults.Remove(personToRemove);
        adultsToShow.Remove(personToRemove);
        
    }

}